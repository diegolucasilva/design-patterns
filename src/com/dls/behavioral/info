Behavioral design patterns are concerned with the interaction and responsibility of objects.
The interaction between the objects should be in such a way that they can easily talk to each other and still
should be loosely coupled.
That means the implementation and the client should be loosely coupled in order to avoid hard coding and dependencies.


In software engineering, behavioral design patterns are design patterns that identify common communication
patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in
carrying out this communication.
Behavioral patterns are concerned with the assignment of responsibilities between objects, or,
encapsulating behavior in an object and delegating requests to it.
Unlike the Creational and Structural patterns, which deal with the instantiation process and the
blueprint of objects and classes, the central idea here is to concentrate on the way objects are interconnected.
In a word, we can say this: If Creational is about instantiation, and Structural is the blueprint,
then Behavioral is the pattern of the relationship among objects.


