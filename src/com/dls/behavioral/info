Behavioral design patterns are concerned with the interaction and responsibility of objects.
The interaction between the objects should be in such a way that they can easily talk to each other and still
should be loosely coupled.
That means the implementation and the client should be loosely coupled in order to avoid hard coding and dependencies.


In software engineering, behavioral design patterns are design patterns that identify common communication
patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in
carrying out this communication.
Behavioral patterns are concerned with the assignment of responsibilities between objects, or,
encapsulating behavior in an object and delegating requests to it.
Unlike the Creational and Structural patterns, which deal with the instantiation process and the
blueprint of objects and classes, the central idea here is to concentrate on the way objects are interconnected.
In a word, we can say this: If Creational is about instantiation, and Structural is the blueprint,
then Behavioral is the pattern of the relationship among objects.





###############################################################################################
Strategy ***
Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into
a separate class, and make their objects interchangeable.

Chain of Reponsability ***
Lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either
to process the request or to pass it to the next handler in the chain

Command ***
The pattern intends to encapsulate in an object all the data required for performing a given action (command),
including what method to call, the method's arguments, and the object to which the method belongs.
This model allows us to decouple objects that produce the commands from their consumers,
so that's why the pattern is commonly known as the producer-consumer pattern.

------------------------------------------------------------

Template Method **
Template Method is a behavioral design pattern that defines the skeleton of an algorithm in the
superclass but lets subclasses override specific steps of the algorithm without changing its structure.

State **
State is a behavioral design pattern that lets an object alter its behavior when its internal state changes.
It appears as if the object changed its class.

------------------------------------------------------------

Mediator *
Mediator design pattern is very helpful in an enterprise application where multiple objects are
interacting with each other. If the objects interact with each other directly, the system components
are tightly-coupled with each other that makes higher maintainability cost and not hard to extend.
Mediator pattern focuses on provide a mediator between objects for communication and help in
implementing lose-coupling between objects.

Observer *
It is a behavioral design pattern that lets you define a subscription mechanism to notify multiple
 objects about any events that happen to the object theyâ€™re observing.

------------------------------------------------------------

Visitor
Visitor is a behavioral design pattern that lets you separate algorithms from the objects on which they operate.

Memento
Without violating encapsulation, capture and externalize an object's internal state so
that the object can be returned to this state later.
Need to restore an object back to its previous state (e.g. "undo" or "rollback" operations).

Iterator
Iterator is a behavioral design pattern that allows sequential traversal through a complex data structure
without exposing its internal details.





